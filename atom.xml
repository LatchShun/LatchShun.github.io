<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Latch轨迹</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://latchshun.github.io/"/>
  <updated>2020-06-28T16:57:35.810Z</updated>
  <id>http://latchshun.github.io/</id>
  
  <author>
    <name>修巴利耶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大表加索引方案</title>
    <link href="http://latchshun.github.io/2020/06/28/%E5%A4%A7%E8%A1%A8%E5%8A%A0%E7%B4%A2%E5%BC%95%E6%96%B9%E6%A1%88/"/>
    <id>http://latchshun.github.io/2020/06/28/大表加索引方案/</id>
    <published>2020-06-28T15:40:00.000Z</published>
    <updated>2020-06-28T16:57:35.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>每个公司针对数据库的设计都有套方案。最近在巡检表的设计，发现之前有张表漏掉了针对更新时间字段<em>updated_at</em>的索引，现在需要加上该索引。</p><p>我们都知道，<strong>为表增加索引是会对表进行加锁处理的</strong>。稍有不慎，可能会导致表被锁后，业务无法进行读写操作而产生事故影响，通常都是报错<code>Waiting for meta data lock</code>。在对表进行修改时，特别是生产上，我们<strong>首先要观察对应的表此时是否在高并发读写（选择操作时机）、表的量级信息</strong>。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>整体思路是：</p><ol><li>先创建一张表，结构和原表相同；</li><li>在新表上添加索引；</li><li><em>rename</em>新表为原表的表名，原表换新的名称；</li><li>为原表新增索引；</li><li>待索引创建成功后，<em>rename</em>原表为原来的名称，并将新表里的数据导入到原表中</li></ol><p><em>SQL</em>可参考：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设需要添加索引的表为`fea_moni_res`</span></span><br><span class="line"><span class="comment">-- 1. 新建与表`fea_moni_res`同结构的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> fea_moni_res_tmp <span class="keyword">LIKE</span> fea_moni_res;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 新表上添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> fea_moni_res_tmp <span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_index_name (col_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. *rename*新表为原表的表名，原表换新的名称</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> fea_moni_res <span class="keyword">TO</span> fea_moni_res_1, fea_moni_res_tmp <span class="keyword">TO</span> fea_moni_res;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 为原表新增索引，此步耗时较长</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> fea_moni_res_1 <span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_index_name (col_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 待索引创建成功后，rename原表为原来的名称，并将新表里的数据导入到原表中</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> fea_moni_res <span class="keyword">TO</span> fea_moni_res_tmp, fea_moni_res_1 <span class="keyword">TO</span> fea_moni_res;</span><br><span class="line"><span class="comment">-- 需要根据业务来确定如果导入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> fea_moni_res(col_name1, col_name2) <span class="keyword">SELECT</span> col_name1, col_name2 <span class="keyword">FROM</span> fea_moni_res_tmp;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文提供了一种为大表添加索引的方法。当然，此方案不是完美的。譬如，步骤3中的<em>rename</em>操作后，是极有可能会对业务产生影响的，因为业务需要根据历史数据来判断逻辑。此时可能不得不在步骤2之后，先行将原表中的数据导入到新表中，待完全导入后再直接切表操作。此需要根据业务的场景来判断，具体问题具体分析。</p><p>此处只是提供了一种方案，涉及到为大表添加字段、删除字段的表锁操作均可参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;每个公司针对数据库的设计都有套方案。最近在巡检表的设计，发现之前有张表漏掉了针对更新时间字段&lt;em&gt;updated_at&lt;/em&gt;的索引，现
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://latchshun.github.io/tags/MySQL/"/>
    
      <category term="索引" scheme="http://latchshun.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="大表" scheme="http://latchshun.github.io/tags/%E5%A4%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于Hive操作HBase报错can not get replica 0 location</title>
    <link href="http://latchshun.github.io/2020/06/22/%E5%85%B3%E4%BA%8EHBase%20cannot%20get%20replica%200%20location%E7%9A%84%E6%8A%A5%E9%94%99/"/>
    <id>http://latchshun.github.io/2020/06/22/关于HBase cannot get replica 0 location的报错/</id>
    <published>2020-06-21T16:27:00.000Z</published>
    <updated>2020-06-21T17:14:02.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近一直在忙于公司的标签系统项目，整个系统的硬件基础都基于阿里云。标签系统分为原生标签、即时标签、实时标签和离线标签，每日晚上会定时处理离线标签。最近接到业务的报错，说他的标签已经两天没数据产出且报错了，扔给了我个log的地址。一看，居然是报错<em>Error while processing statement: FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.mr.MapRedTask. Can’t get the location for replica 0</em>。粗略看了下日志，没发现有什么问题，也想不明白哪里引起这个问题，遂上网查询一番。</p><p>–Error while processing statement: hive configuration hive.hadoop.supports.splittable.combineinputformat does not exists–</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>总结下网上搜索出的结果<a href="https://www.jianshu.com/p/5a43493bcb4e" target="_blank" rel="noopener">^1</a>，大致分为三类：</p><ol><li><p><em>hbase</em>中没有相关的表<br>经排查，报错的标签对应的表是存在的，且有些标签是成功的。所以这种解决方法不适合。</p></li><li><p><em>hbase</em>表错误<br>执行<em>hbase hbck</em>命令<a href="https://blog.csdn.net/liliwei0213/article/details/53639275" target="_blank" rel="noopener">^2</a>检查是否有表错误。由于系统中有标签的成功，所以这种解决方法也不适合。</p></li><li><p><em>zookeeper</em>连接错误</p></li></ol><p><em>hive</em>或者<em>API</em>或其他的方式连接<em>HBase</em>时，首先都要去连接<em>HBase</em>管理的<em>zookeeper</em>，从<em>zookeeper</em>中获取<em>HBase</em>的元数据信息，根据获取的元数据信息到指定的<em>RegionServer</em>里取值。如果<em>zookeeper</em>连接不上，那会报错<em>can not get replica 0 location</em>。经查询<em>hive</em>的日志，发现的确是<em>zookeepr</em>的原因，修改后解决。</p><h2 id="追根溯源"><a href="#追根溯源" class="headerlink" title="追根溯源"></a>追根溯源</h2><p>那<em>zookeeper</em>连接不上，为什么会报错<em>can not get replica 0 location</em>？这个报错又是什么意思呢？上面也解释了客户端读取<em>HBase</em>的流程：即首先都要去连接<em>HBase</em>管理的<em>zookeeper</em>，从<em>zookeeper</em>中获取<em>HBase</em>的元数据信息，根据获取的元数据信息到指定的<em>RegionServer</em>里取值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近一直在忙于公司的标签系统项目，整个系统的硬件基础都基于阿里云。标签系统分为原生标签、即时标签、实时标签和离线标签，每日晚上会定时处理离线
      
    
    </summary>
    
    
      <category term="Hive" scheme="http://latchshun.github.io/tags/Hive/"/>
    
      <category term="HBase" scheme="http://latchshun.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>动态修改注解值</title>
    <link href="http://latchshun.github.io/2019/09/25/%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E6%B3%A8%E8%A7%A3%E5%80%BC/"/>
    <id>http://latchshun.github.io/2019/09/25/动态修改注解值/</id>
    <published>2019-09-25T14:17:00.000Z</published>
    <updated>2019-10-20T14:53:06.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平时开发业务时，由于特殊需要，使得一份代码需要部署到4个应用服务中为不同对象进行服务。公司使用的配置中心是自研发的，暂不支持配置中心注解（如：<code>@DynamicPropertyInject(name = &quot;${application.effective.exchanges}&quot;)</code>）的值采用<code>properties</code>文件来动态配置。这使得在同套代码的不同应用场景下，表明同个含义的注入就需要声明多次，且有且仅只有一个声明对于当前应用是有效的。从简洁的角度来说不适合。</p><p>示例注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DynamicPropertyInject &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能依据<code>properties</code>注入的代码情形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DynamicPropertyInject</span>(name = <span class="string">"application1.effective.name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String application1ExchangeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamicPropertyInject</span>(name = <span class="string">"application2.effective.name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String application2ExchageName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DynamicPropertyInject</span>(name = <span class="string">"application3.effective.name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String application3ExchangeName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实在每个应用中，仅只有<code>application1ExchangeName</code>或<code>application2ExchangeName</code>或<code>application3ExchangeName</code>其中之一有效。</p><p>能依据<code>properties</code>注入的代码情形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DynamicPropertyInject</span>(name = <span class="string">"$&#123;application.effective.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String applicationExchangeName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>针对如上所述的场景，其实要解决的是来获取<code>applicationExchangeName</code>的时候，需要根据当前的应用名称来取其对应的值。很自然的，第一反应是通过反射来获取注解属性的值并修改之。</p><p>在这里提供下思路：</p><ol><li>为<code>DynamicConfiguration</code>的类定义切面；</li><li>程序执行到注解<code>DynamicPropertyInject</code>时，判断是否需要去修改值。是则修改，否则跳过。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfigValueAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARACTER_DOLLAR = <span class="string">"$"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARACTER_NUMBERSIGN = <span class="string">"#"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationProperties applicationProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"this(package of DynamicConfiguration)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = pjp.getSignature().getName();</span><br><span class="line">        <span class="keyword">if</span> (methodName.startsWith(<span class="string">"get"</span>) &amp;&amp; methodName.length() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">//提取属性名</span></span><br><span class="line">            String fieldName = methodName.substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + methodName.substring(<span class="number">4</span>);</span><br><span class="line">            Field field = pjp.getTarget().getClass().getDeclaredField(fieldName);</span><br><span class="line">            DynamicPropertyInject configuration = field.getAnnotation(DynamicPropertyInject.class);</span><br><span class="line"></span><br><span class="line">            String configName = configuration.name();</span><br><span class="line">            <span class="comment">//属性的DynamicPropertyInject注解值是否需要修改</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(configName) &amp;&amp; StringUtils.startsWith(configName, CHARACTER_DOLLAR) || StringUtils.startsWith(configName, CHARACTER_NUMBERSIGN)) &#123;</span><br><span class="line">                InvocationHandler invocationHandler = Proxy.getInvocationHandler(configuration);</span><br><span class="line">                Field declaredField = invocationHandler.getClass().getDeclaredField(<span class="string">"memberValues"</span>);</span><br><span class="line">                declaredField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                Map memberValues = (Map) declaredField.get(invocationHandler);</span><br><span class="line">                <span class="comment">//获取修改的值并修改</span></span><br><span class="line">                memberValues.put(<span class="string">"name"</span>, getApplicationPropertiesByConfigElement(configName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取修改的值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApplicationPropertiesByConfigElement</span><span class="params">(String configName)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        Field[] fields = ApplicationProperties.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(fields)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            Value annotation = field.getAnnotation(Value.class);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(annotation) &amp;&amp; StringUtils.equals(configName, annotation.value())) &#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(field.get(applicationProperties));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//application property</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;application.effective.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String applicationEffectiveName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;平时开发业务时，由于特殊需要，使得一份代码需要部署到4个应用服务中为不同对象进行服务。公司使用的配置中心是自研发的，暂不支持配置中心注解（如
      
    
    </summary>
    
    
      <category term="Java" scheme="http://latchshun.github.io/tags/Java/"/>
    
      <category term="反射" scheme="http://latchshun.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="注解" scheme="http://latchshun.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="AOP" scheme="http://latchshun.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Redis Lua scripts debugger使用</title>
    <link href="http://latchshun.github.io/2019/09/11/redis_lua_debugger/"/>
    <id>http://latchshun.github.io/2019/09/11/redis_lua_debugger/</id>
    <published>2019-09-11T11:50:00.000Z</published>
    <updated>2019-09-11T12:02:45.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>使用<code>Redis</code>开发分布式应用时，难免会遇到需要使用分布式锁来确保某一小段逻辑的原子性操作，如：当存在某个<code>key</code>对应的值<code>A</code>大于值<code>B</code>时，则返回<code>false</code>；否则<code>A + 1</code>。试想一下，如果用到分布式锁，是不是有点感觉像是杀鸡用宰牛刀？</p><p>由于<code>Redis</code>的操作都是原子性的，所以我们可以将如上所述的类似逻辑采用<code>Lua</code>脚本表述作为一个原子任务向<code>redisClient</code>提交，可以避免采用分布式锁。如脚本:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> expire_time = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> max_count = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 验证key是否存在，不存在设置过期时间</span></span><br><span class="line"><span class="keyword">local</span> is_key_exists = redis.call(<span class="string">"EXISTS"</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 存在</span></span><br><span class="line"><span class="keyword">if</span> is_key_exists == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> key_count = redis.call(<span class="string">"get"</span>, key)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">tonumber</span>(key_count) &gt;= max_count <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        redis.call(<span class="string">"incr"</span>, key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">"incr"</span>, key);</span><br><span class="line">    redis.call(<span class="string">"expire"</span>, key, expire_time)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但此时发现，在<code>Redis</code>中调试是个困难的事情。但幸好，从<code>Redis 3,2</code>版本开始，提供了<code>Lua script debugger</code>来解决此问题。</p><h2 id="Redis-Lua调试器特点"><a href="#Redis-Lua调试器特点" class="headerlink" title="Redis Lua调试器特点"></a>Redis Lua调试器特点</h2><p><code>Redis Lua</code>调试器代号为<code>LDB</code>，特点如下：</p><ul><li>支持单步调试</li><li>支持静态和动态断点</li><li>支持将被调试的脚本载入至调试终端</li><li>支持对<code>Lua</code>变量进行观察</li><li>支持追踪脚本执行的<code>Redis</code>命令</li><li>支持以美观方式打印<code>Redis</code>值及<code>Lua</code>值</li><li>能够在无线循环及长时间执行步骤中模拟出断点</li><li>采用<code>CS</code>模型，<code>S</code>即<code>Redis</code>服务器，<code>C</code>即<code>redis-cli</code>客户端</li><li>默认情况下，每个调试会话都是<code>fork</code>子进程进行的。所以调试过程中不会影响<code>Redis</code>其他操作；调试结束后，本次会话中的内容都会被回滚</li><li>你也可以将调试会话设置成同步模式，但是此时必须注意调试时会影响<code>Redis</code>所有其他的操作，且调试会话产生的结果都会被保存下来</li></ul><h2 id="Redis-Lua调试器快速入门"><a href="#Redis-Lua调试器快速入门" class="headerlink" title="Redis Lua调试器快速入门"></a>Redis Lua调试器快速入门</h2><p>想看视频的直接点<a href="https://www.bilibili.com/video/av9437433/" target="_blank" rel="noopener">这里</a>，这是<code>Redis</code>之父录制的视频。</p><p>想看文字的继续。以我们在刚开始提供的<code>Lua</code>脚本，假设其目录为<code>~/Desktop/tmp/test.lua</code>。此时执行命令（需要先<code>cd</code>到<code>redis-cli</code>命令目录下）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- async mode</span><br><span class="line">redis-cli --ldb --eval redis_lua_file redis_key , param1 param2</span><br><span class="line"></span><br><span class="line">-- sync mode</span><br><span class="line">redis-cli --ldb-sync-mode --eval redis_lua_file redis_key , param1 param2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~  redis-cli --ldb --eval ~/Desktop/tmp/test.lua key , 1 3</span><br><span class="line">Lua debugging session started, please use:</span><br><span class="line">quit    -- End the session.</span><br><span class="line">restart -- Restart the script in debug mode again.</span><br><span class="line">help    -- Show Lua script debugging commands.</span><br><span class="line"></span><br><span class="line">* Stopped at 6, stop reason = step over</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> 6   <span class="built_in">local</span> key = KEYS[1]</span></span><br><span class="line">lua debugger&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>redis-cli</code>里的逗号前后都是有空格的。我这里示例是本地有开启<code>redis-server</code>，如果没有开启也可以连接到远程<code>redis server</code>进行调试。另外，<code>key</code>表示的是要传入脚本中处理的<code>redis key</code>，其后的1和3则是参数，中间用空格隔开。</p></blockquote><p>之后所要做的就是在<code>debugger</code>里输入<code>s</code>命令回车，表示执行下一步，直至程序结束或有异常退出为止。</p><h2 id="Redis-Lua-debug命令"><a href="#Redis-Lua-debug命令" class="headerlink" title="Redis Lua debug命令"></a>Redis Lua debug命令</h2><p>括号中字母代表命令缩写。</p><p><img src="https://s2.ax1x.com/2019/09/11/nwnpOU.png" alt="redis_lua_debug命令.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://redis.io/topics/ldb" target="_blank" rel="noopener">Redis Lua scripts debugger</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景说明&quot;&gt;&lt;a href=&quot;#背景说明&quot; class=&quot;headerlink&quot; title=&quot;背景说明&quot;&gt;&lt;/a&gt;背景说明&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;Redis&lt;/code&gt;开发分布式应用时，难免会遇到需要使用分布式锁来确保某一小段逻辑的原子性操作，如：当存
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://latchshun.github.io/tags/Redis/"/>
    
      <category term="Redis Lua scripts debugger" scheme="http://latchshun.github.io/tags/Redis-Lua-scripts-debugger/"/>
    
  </entry>
  
  <entry>
    <title>微服务基础架构图谱</title>
    <link href="http://latchshun.github.io/2019/08/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%B0%B1/"/>
    <id>http://latchshun.github.io/2019/08/07/微服务基础架构图谱/</id>
    <published>2019-08-07T07:25:49.000Z</published>
    <updated>2019-08-07T09:12:21.893Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgchr.com/i/e5vbTg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/07/e5vbTg.png" alt="e5vbTg.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/e5vbTg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/07/e5vbTg.png&quot; alt=&quot;e5vbTg.png
      
    
    </summary>
    
    
      <category term="技术图谱" scheme="http://latchshun.github.io/tags/%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    
      <category term="微服务" scheme="http://latchshun.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
